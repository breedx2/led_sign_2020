# all credit to https://github.com/adafruit/monochron/blob/master/firmware/font5x7.h

FONT_MEM = (
    bytes([0x00, 0x00, 0x00, 0x00, 0x00, # (space)
           0x00, 0x00, 0x5F, 0x00, 0x00, # !
           0x00, 0x07, 0x00, 0x07, 0x00, # "
           0x14, 0x7F, 0x14, 0x7F, 0x14, # #
           0x24, 0x2A, 0x7F, 0x2A, 0x12, # $
           0x23, 0x13, 0x08, 0x64, 0x62, # %
           0x36, 0x49, 0x55, 0x22, 0x50, # &
           0x00, 0x05, 0x03, 0x00, 0x00, # '
           0x00, 0x1C, 0x22, 0x41, 0x00, # (
           0x00, 0x41, 0x22, 0x1C, 0x00, # )
           0x08, 0x2A, 0x1C, 0x2A, 0x08, # *
           0x08, 0x08, 0x3E, 0x08, 0x08, # +
           0x00, 0x50, 0x30, 0x00, 0x00, # ,
           0x08, 0x08, 0x08, 0x08, 0x08, # -
           0x00, 0x60, 0x60, 0x00, 0x00, # .
           0x20, 0x10, 0x08, 0x04, 0x02, # /
           0x3E, 0x51, 0x49, 0x45, 0x3E, # 0
           0x00, 0x42, 0x7F, 0x40, 0x00, # 1
           0x42, 0x61, 0x51, 0x49, 0x46, # 2
           0x21, 0x41, 0x45, 0x4B, 0x31, # 3
           0x18, 0x14, 0x12, 0x7F, 0x10, # 4
           0x27, 0x45, 0x45, 0x45, 0x39, # 5
           0x3C, 0x4A, 0x49, 0x49, 0x30, # 6
           0x01, 0x71, 0x09, 0x05, 0x03, # 7
           0x36, 0x49, 0x49, 0x49, 0x36, # 8
           0x06, 0x49, 0x49, 0x29, 0x1E, # 9
           0x00, 0x36, 0x36, 0x00, 0x00, # :
           0x00, 0x56, 0x36, 0x00, 0x00, # ;
           0x00, 0x08, 0x14, 0x22, 0x41, # <
           0x14, 0x14, 0x14, 0x14, 0x14, # =
           0x41, 0x22, 0x14, 0x08, 0x00, # >
           0x02, 0x01, 0x51, 0x09, 0x06, # ?
           0x32, 0x49, 0x79, 0x41, 0x3E, # @
           0x7E, 0x11, 0x11, 0x11, 0x7E, # A
           0x7F, 0x49, 0x49, 0x49, 0x36, # B
           0x3E, 0x41, 0x41, 0x41, 0x22, # C
           0x7F, 0x41, 0x41, 0x22, 0x1C, # D
           0x7F, 0x49, 0x49, 0x49, 0x41, # E
           0x7F, 0x09, 0x09, 0x01, 0x01, # F
           0x3E, 0x41, 0x41, 0x51, 0x32, # G
           0x7F, 0x08, 0x08, 0x08, 0x7F, # H
           0x00, 0x41, 0x7F, 0x41, 0x00, # I
           0x20, 0x40, 0x41, 0x3F, 0x01, # J
           0x7F, 0x08, 0x14, 0x22, 0x41, # K
           0x7F, 0x40, 0x40, 0x40, 0x40, # L
           0x7F, 0x02, 0x04, 0x02, 0x7F, # M
           0x7F, 0x04, 0x08, 0x10, 0x7F, # N
           0x3E, 0x41, 0x41, 0x41, 0x3E, # O
           0x7F, 0x09, 0x09, 0x09, 0x06, # P
           0x3E, 0x41, 0x51, 0x21, 0x5E, # Q
           0x7F, 0x09, 0x19, 0x29, 0x46, # R
           0x46, 0x49, 0x49, 0x49, 0x31, # S
           0x01, 0x01, 0x7F, 0x01, 0x01, # T
           0x3F, 0x40, 0x40, 0x40, 0x3F, # U
           0x1F, 0x20, 0x40, 0x20, 0x1F, # V
           0x7F, 0x20, 0x18, 0x20, 0x7F, # W
           0x63, 0x14, 0x08, 0x14, 0x63, # X
           0x03, 0x04, 0x78, 0x04, 0x03, # Y
           0x61, 0x51, 0x49, 0x45, 0x43, # Z
           0x00, 0x00, 0x7F, 0x41, 0x41, # []
           0x02, 0x04, 0x08, 0x10, 0x20, # "\"
           0x41, 0x41, 0x7F, 0x00, 0x00, # ]
           0x04, 0x02, 0x01, 0x02, 0x04, # ^
           0x40, 0x40, 0x40, 0x40, 0x40, # _
           0x00, 0x01, 0x02, 0x04, 0x00, # `
           0x20, 0x54, 0x54, 0x54, 0x78, # a
           0x7F, 0x48, 0x44, 0x44, 0x38, # b
           0x38, 0x44, 0x44, 0x44, 0x20, # c
           0x38, 0x44, 0x44, 0x48, 0x7F, # d
           0x38, 0x54, 0x54, 0x54, 0x18, # e
           0x08, 0x7E, 0x09, 0x01, 0x02, # f
           0x08, 0x14, 0x54, 0x54, 0x3C, # g
           0x7F, 0x08, 0x04, 0x04, 0x78, # h
           0x00, 0x44, 0x7D, 0x40, 0x00, # i
           0x20, 0x40, 0x44, 0x3D, 0x00, # j
           0x00, 0x7F, 0x10, 0x28, 0x44, # k
           0x00, 0x41, 0x7F, 0x40, 0x00, # l
           0x7C, 0x04, 0x18, 0x04, 0x78, # m
           0x7C, 0x08, 0x04, 0x04, 0x78, # n
           0x38, 0x44, 0x44, 0x44, 0x38, # o
           0x7C, 0x14, 0x14, 0x14, 0x08, # p
           0x08, 0x14, 0x14, 0x18, 0x7C, # q
           0x7C, 0x08, 0x04, 0x04, 0x08, # r
           0x48, 0x54, 0x54, 0x54, 0x20, # s
           0x04, 0x3F, 0x44, 0x40, 0x20, # t
           0x3C, 0x40, 0x40, 0x20, 0x7C, # u
           0x1C, 0x20, 0x40, 0x20, 0x1C, # v
           0x3C, 0x40, 0x30, 0x40, 0x3C, # w
           0x44, 0x28, 0x10, 0x28, 0x44, # x
           0x0C, 0x50, 0x50, 0x50, 0x3C, # y
           0x44, 0x64, 0x54, 0x4C, 0x44, # z
           0x00, 0x08, 0x36, 0x41, 0x00, # {
           0x00, 0x00, 0x7F, 0x00, 0x00, # |
           0x00, 0x41, 0x36, 0x08, 0x00, # }
           0x08, 0x08, 0x2A, 0x1C, 0x08, # ->
           0x08, 0x1C, 0x2A, 0x08, 0x08  # <-
    ])
)
GL = const(5)  # glyph length
font = [
   memoryview(FONT_MEM)[0*GL:1*GL],
    memoryview(FONT_MEM)[1*GL:2*GL],
    memoryview(FONT_MEM)[2*GL:3*GL],
    memoryview(FONT_MEM)[3*GL:4*GL],
    memoryview(FONT_MEM)[4*GL:5*GL],
    memoryview(FONT_MEM)[5*GL:6*GL],
    memoryview(FONT_MEM)[6*GL:7*GL],
    memoryview(FONT_MEM)[7*GL:8*GL],
    memoryview(FONT_MEM)[8*GL:9*GL],
    memoryview(FONT_MEM)[9*GL:10*GL],
    memoryview(FONT_MEM)[10*GL:11*GL],
    memoryview(FONT_MEM)[11*GL:12*GL],
    memoryview(FONT_MEM)[12*GL:13*GL],
    memoryview(FONT_MEM)[13*GL:14*GL],
    memoryview(FONT_MEM)[14*GL:15*GL],
    memoryview(FONT_MEM)[15*GL:16*GL],
    memoryview(FONT_MEM)[16*GL:17*GL],
    memoryview(FONT_MEM)[17*GL:18*GL],
    memoryview(FONT_MEM)[18*GL:19*GL],
    memoryview(FONT_MEM)[19*GL:20*GL],
    memoryview(FONT_MEM)[20*GL:21*GL],
    memoryview(FONT_MEM)[21*GL:22*GL],
    memoryview(FONT_MEM)[22*GL:23*GL],
    memoryview(FONT_MEM)[23*GL:24*GL],
    memoryview(FONT_MEM)[24*GL:25*GL],
    memoryview(FONT_MEM)[25*GL:26*GL],
    memoryview(FONT_MEM)[26*GL:27*GL],
    memoryview(FONT_MEM)[27*GL:28*GL],
    memoryview(FONT_MEM)[28*GL:29*GL],
    memoryview(FONT_MEM)[29*GL:30*GL],
    memoryview(FONT_MEM)[30*GL:31*GL],
    memoryview(FONT_MEM)[31*GL:32*GL],
    memoryview(FONT_MEM)[32*GL:33*GL],
    memoryview(FONT_MEM)[33*GL:34*GL],
    memoryview(FONT_MEM)[34*GL:35*GL],
    memoryview(FONT_MEM)[35*GL:36*GL],
    memoryview(FONT_MEM)[36*GL:37*GL],
    memoryview(FONT_MEM)[37*GL:38*GL],
    memoryview(FONT_MEM)[38*GL:39*GL],
    memoryview(FONT_MEM)[39*GL:40*GL],
    memoryview(FONT_MEM)[40*GL:41*GL],
    memoryview(FONT_MEM)[41*GL:42*GL],
    memoryview(FONT_MEM)[42*GL:43*GL],
    memoryview(FONT_MEM)[43*GL:44*GL],
    memoryview(FONT_MEM)[44*GL:45*GL],
    memoryview(FONT_MEM)[45*GL:46*GL],
    memoryview(FONT_MEM)[46*GL:47*GL],
    memoryview(FONT_MEM)[47*GL:48*GL],
    memoryview(FONT_MEM)[48*GL:49*GL],
    memoryview(FONT_MEM)[49*GL:50*GL],
    memoryview(FONT_MEM)[50*GL:51*GL],
    memoryview(FONT_MEM)[51*GL:52*GL],
    memoryview(FONT_MEM)[52*GL:53*GL],
    memoryview(FONT_MEM)[53*GL:54*GL],
    memoryview(FONT_MEM)[54*GL:55*GL],
    memoryview(FONT_MEM)[55*GL:56*GL],
    memoryview(FONT_MEM)[56*GL:57*GL],
    memoryview(FONT_MEM)[57*GL:58*GL],
    memoryview(FONT_MEM)[58*GL:59*GL],
    memoryview(FONT_MEM)[59*GL:60*GL],
    memoryview(FONT_MEM)[60*GL:61*GL],
    memoryview(FONT_MEM)[61*GL:62*GL],
    memoryview(FONT_MEM)[62*GL:63*GL],
    memoryview(FONT_MEM)[63*GL:64*GL],
    memoryview(FONT_MEM)[64*GL:65*GL],
    memoryview(FONT_MEM)[65*GL:66*GL],
    memoryview(FONT_MEM)[66*GL:67*GL],
    memoryview(FONT_MEM)[67*GL:68*GL],
    memoryview(FONT_MEM)[68*GL:69*GL],
    memoryview(FONT_MEM)[69*GL:70*GL],
    memoryview(FONT_MEM)[70*GL:71*GL],
    memoryview(FONT_MEM)[71*GL:72*GL],
    memoryview(FONT_MEM)[72*GL:73*GL],
    memoryview(FONT_MEM)[73*GL:74*GL],
    memoryview(FONT_MEM)[74*GL:75*GL],
    memoryview(FONT_MEM)[75*GL:76*GL],
    memoryview(FONT_MEM)[76*GL:77*GL],
    memoryview(FONT_MEM)[77*GL:78*GL],
    memoryview(FONT_MEM)[78*GL:79*GL],
    memoryview(FONT_MEM)[79*GL:80*GL],
    memoryview(FONT_MEM)[80*GL:81*GL],
    memoryview(FONT_MEM)[81*GL:82*GL],
    memoryview(FONT_MEM)[82*GL:83*GL],
    memoryview(FONT_MEM)[83*GL:84*GL],
    memoryview(FONT_MEM)[84*GL:85*GL],
    memoryview(FONT_MEM)[85*GL:86*GL],
    memoryview(FONT_MEM)[86*GL:87*GL],
    memoryview(FONT_MEM)[87*GL:88*GL],
    memoryview(FONT_MEM)[88*GL:89*GL],
    memoryview(FONT_MEM)[89*GL:90*GL],
    memoryview(FONT_MEM)[90*GL:91*GL],
    memoryview(FONT_MEM)[91*GL:92*GL],
    memoryview(FONT_MEM)[92*GL:93*GL],
    memoryview(FONT_MEM)[93*GL:94*GL],
    memoryview(FONT_MEM)[94*GL:95*GL],
    memoryview(FONT_MEM)[95*GL:96*GL],
]

def glyph(ch):
    return font[ord(ch) - ord(' ')]

# must be between 0 and 9
def digit(single_digit):
    return font[ord('0') - ord(' ') + single_digit]
